Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    CONJUNCTION
    CONS
    DISJUNCTION
    DIVIDE
    EQUAL_TO
    FALSE
    GREATER_THAN
    GREATER_THAN_EQUAL_TO
    HASHTAG
    IN
    INT_DIVIDE
    LEFT_BRACKET
    LESS_THAN
    LESS_THAN_EQUAL_TO
    MOD
    NEGATION
    NOT_EQUAL_TO
    RAISED_TO_POWER_OF
    RIGHT_BRACKET
    STRING
    TIMES
    TRUE

Grammar

Rule 0     S' -> expr
Rule 1     expr -> prop
Rule 2     prop -> prop PLUS prop
Rule 3     prop -> prop MINUS prop
Rule 4     prop -> MINUS prop
Rule 5     prop -> LEFT_PARENTHESIS prop RIGHT_PARENTHESIS
Rule 6     prop -> INTEGER
Rule 7     prop -> REAL

Terminals, with rules where they appear

COMMA                : 
CONJUNCTION          : 
CONS                 : 
DISJUNCTION          : 
DIVIDE               : 
EQUAL_TO             : 
FALSE                : 
GREATER_THAN         : 
GREATER_THAN_EQUAL_TO : 
HASHTAG              : 
IN                   : 
INTEGER              : 6
INT_DIVIDE           : 
LEFT_BRACKET         : 
LEFT_PARENTHESIS     : 5
LESS_THAN            : 
LESS_THAN_EQUAL_TO   : 
MINUS                : 3 4
MOD                  : 
NEGATION             : 
NOT_EQUAL_TO         : 
PLUS                 : 2
RAISED_TO_POWER_OF   : 
REAL                 : 7
RIGHT_BRACKET        : 
RIGHT_PARENTHESIS    : 5
STRING               : 
TIMES                : 
TRUE                 : 
error                : 

Nonterminals, with rules where they appear

expr                 : 0
prop                 : 1 2 2 3 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . prop
    (2) prop -> . prop PLUS prop
    (3) prop -> . prop MINUS prop
    (4) prop -> . MINUS prop
    (5) prop -> . LEFT_PARENTHESIS prop RIGHT_PARENTHESIS
    (6) prop -> . INTEGER
    (7) prop -> . REAL

    MINUS           shift and go to state 3
    LEFT_PARENTHESIS shift and go to state 4
    INTEGER         shift and go to state 5
    REAL            shift and go to state 6

    expr                           shift and go to state 1
    prop                           shift and go to state 2

state 1

    (0) S' -> expr .



state 2

    (1) expr -> prop .
    (2) prop -> prop . PLUS prop
    (3) prop -> prop . MINUS prop

    $end            reduce using rule 1 (expr -> prop .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8


state 3

    (4) prop -> MINUS . prop
    (2) prop -> . prop PLUS prop
    (3) prop -> . prop MINUS prop
    (4) prop -> . MINUS prop
    (5) prop -> . LEFT_PARENTHESIS prop RIGHT_PARENTHESIS
    (6) prop -> . INTEGER
    (7) prop -> . REAL

    MINUS           shift and go to state 3
    LEFT_PARENTHESIS shift and go to state 4
    INTEGER         shift and go to state 5
    REAL            shift and go to state 6

    prop                           shift and go to state 9

state 4

    (5) prop -> LEFT_PARENTHESIS . prop RIGHT_PARENTHESIS
    (2) prop -> . prop PLUS prop
    (3) prop -> . prop MINUS prop
    (4) prop -> . MINUS prop
    (5) prop -> . LEFT_PARENTHESIS prop RIGHT_PARENTHESIS
    (6) prop -> . INTEGER
    (7) prop -> . REAL

    MINUS           shift and go to state 3
    LEFT_PARENTHESIS shift and go to state 4
    INTEGER         shift and go to state 5
    REAL            shift and go to state 6

    prop                           shift and go to state 10

state 5

    (6) prop -> INTEGER .

    PLUS            reduce using rule 6 (prop -> INTEGER .)
    MINUS           reduce using rule 6 (prop -> INTEGER .)
    $end            reduce using rule 6 (prop -> INTEGER .)
    RIGHT_PARENTHESIS reduce using rule 6 (prop -> INTEGER .)


state 6

    (7) prop -> REAL .

    PLUS            reduce using rule 7 (prop -> REAL .)
    MINUS           reduce using rule 7 (prop -> REAL .)
    $end            reduce using rule 7 (prop -> REAL .)
    RIGHT_PARENTHESIS reduce using rule 7 (prop -> REAL .)


state 7

    (2) prop -> prop PLUS . prop
    (2) prop -> . prop PLUS prop
    (3) prop -> . prop MINUS prop
    (4) prop -> . MINUS prop
    (5) prop -> . LEFT_PARENTHESIS prop RIGHT_PARENTHESIS
    (6) prop -> . INTEGER
    (7) prop -> . REAL

    MINUS           shift and go to state 3
    LEFT_PARENTHESIS shift and go to state 4
    INTEGER         shift and go to state 5
    REAL            shift and go to state 6

    prop                           shift and go to state 11

state 8

    (3) prop -> prop MINUS . prop
    (2) prop -> . prop PLUS prop
    (3) prop -> . prop MINUS prop
    (4) prop -> . MINUS prop
    (5) prop -> . LEFT_PARENTHESIS prop RIGHT_PARENTHESIS
    (6) prop -> . INTEGER
    (7) prop -> . REAL

    MINUS           shift and go to state 3
    LEFT_PARENTHESIS shift and go to state 4
    INTEGER         shift and go to state 5
    REAL            shift and go to state 6

    prop                           shift and go to state 12

state 9

    (4) prop -> MINUS prop .
    (2) prop -> prop . PLUS prop
    (3) prop -> prop . MINUS prop

    PLUS            reduce using rule 4 (prop -> MINUS prop .)
    MINUS           reduce using rule 4 (prop -> MINUS prop .)
    $end            reduce using rule 4 (prop -> MINUS prop .)
    RIGHT_PARENTHESIS reduce using rule 4 (prop -> MINUS prop .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 10

    (5) prop -> LEFT_PARENTHESIS prop . RIGHT_PARENTHESIS
    (2) prop -> prop . PLUS prop
    (3) prop -> prop . MINUS prop

    RIGHT_PARENTHESIS shift and go to state 13
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8


state 11

    (2) prop -> prop PLUS prop .
    (2) prop -> prop . PLUS prop
    (3) prop -> prop . MINUS prop

    PLUS            reduce using rule 2 (prop -> prop PLUS prop .)
    MINUS           reduce using rule 2 (prop -> prop PLUS prop .)
    $end            reduce using rule 2 (prop -> prop PLUS prop .)
    RIGHT_PARENTHESIS reduce using rule 2 (prop -> prop PLUS prop .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 12

    (3) prop -> prop MINUS prop .
    (2) prop -> prop . PLUS prop
    (3) prop -> prop . MINUS prop

    PLUS            reduce using rule 3 (prop -> prop MINUS prop .)
    MINUS           reduce using rule 3 (prop -> prop MINUS prop .)
    $end            reduce using rule 3 (prop -> prop MINUS prop .)
    RIGHT_PARENTHESIS reduce using rule 3 (prop -> prop MINUS prop .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 13

    (5) prop -> LEFT_PARENTHESIS prop RIGHT_PARENTHESIS .

    PLUS            reduce using rule 5 (prop -> LEFT_PARENTHESIS prop RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 5 (prop -> LEFT_PARENTHESIS prop RIGHT_PARENTHESIS .)
    $end            reduce using rule 5 (prop -> LEFT_PARENTHESIS prop RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 5 (prop -> LEFT_PARENTHESIS prop RIGHT_PARENTHESIS .)

